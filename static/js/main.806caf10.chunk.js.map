{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["TodoList","props","todos","selectUser","setQueryText","setQueryCategory","textFilter","categoryFilter","filteredTodos","className","type","onChange","value","map","todo","key","id","completed","readOnly","title","onClick","userId","CurrentUser","selectedUser","clearSelect","name","email","phone","a","fetch","response","json","getUser","getAll","App","state","selectedUserId","currentUser","queryFilter","queryCategory","user","setState","data","e","target","filter","includes","this","getData","GetAll","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.806caf10.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    selectUser,\n    setQueryText,\n    setQueryCategory,\n    textFilter,\n    categoryFilter,\n  } = props;\n\n  let filteredTodos = textFilter(todos);\n\n  filteredTodos = categoryFilter(filteredTodos);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label>\n        Find\n        <input\n          type=\"text\"\n          onChange={setQueryText}\n        />\n      </label>\n      <select onChange={setQueryCategory}>\n        <option value=\"all\">All</option>\n        <option value=\"true\">Completed</option>\n        <option value=\"false\">Active</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {\n            filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={!todo.completed\n                  ? 'TodoList__item TodoList__item--unchecked'\n                  : 'TodoList__item TodoList__item--checked'}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\"\n                  type=\"button\"\n                  onClick={selectUser(todo.userId)}\n                >\n                  User&nbsp; #\n                  {\n                    todo.userId\n                  }\n                </button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  setQueryText: PropTypes.func.isRequired,\n  setQueryCategory: PropTypes.func.isRequired,\n  textFilter: PropTypes.func.isRequired,\n  categoryFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ selectedUser, clearSelect }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        #\n        {selectedUser.id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n    <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n    <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n    <button\n      className=\"\n        TodoList__user-button\n        TodoList__user-button--selected\n        button\"\n      type=\"button\"\n      onClick={clearSelect}\n    >\n      Unselect user\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  selectedUser: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  clearSelect: PropTypes.func.isRequired,\n};\n","export async function getAll() {\n  const response = await fetch('https://mate-api.herokuapp.com/todos');\n\n  return response.json();\n}\n\nexport async function getUser(id) {\n  const response = await fetch(`https://mate-api.herokuapp.com/users/${id}`);\n\n  return response.json();\n}\n\nexport default getAll;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport GetAll, { getUser } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    currentUser: '',\n    queryFilter: '',\n    queryCategory: 'all',\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async getData() {\n    const todos = await GetAll();\n\n    this.setState({\n      todos: todos.data,\n    });\n  }\n\n  selectUser = id => async() => {\n    const user = await getUser(id);\n\n    this.setState({\n      selectedUserId: id,\n      currentUser: user.data,\n    });\n  }\n\n  clearSelect = () => {\n    this.setState({\n      selectedUserId: 0,\n      currentUser: '',\n    });\n  }\n\n  setQueryText = (e) => {\n    this.setState({\n      queryFilter: e.target.value,\n    });\n  }\n\n  setQueryCategory = (e) => {\n    this.setState({\n      queryCategory: e.target.value,\n    });\n  }\n\n  textFilter = todos => todos.filter((todo) => {\n    if (todo.title === null) {\n      return false;\n    }\n\n    return todo.title.includes(this.state.queryFilter);\n  });\n\n  categoryFilter = todos => todos.filter((todo) => {\n    if (this.state.queryCategory === 'all') {\n      return true;\n    }\n\n    if (typeof todo.completed !== 'boolean') {\n      return false;\n    }\n\n    if (todo.completed === true && this.state.queryCategory === 'true') {\n      return true;\n    }\n\n    if (todo.completed === false && this.state.queryCategory === 'false') {\n      return true;\n    }\n\n    return (this.state.queryCategory === todo.completed);\n  });\n\n  render() {\n    const { todos, selectedUserId, currentUser } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            setQueryText={this.setQueryText}\n            setQueryCategory={this.setQueryCategory}\n            textFilter={this.textFilter}\n            categoryFilter={this.categoryFilter}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUser={currentUser}\n                clearSelect={this.clearSelect}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}